{"version":3,"sources":["services/history.js","components/reusable/input/index.js","components/reusable/button/index.js","common/actions/auth.js","components/signin/signin.js","components/signup/signup.js","components/chat/chat-list/index.js","common/actions/chat.js","components/chat/chat-create/index.js","components/chat/chat/index.js","components/chat/index.js","App.js","common/reducers/auth.js","common/reducers/chat.js","common/reducers/index.js","services/http.js","common/sagas/auth.js","common/sagas/chat.js","common/sagas/index.js","store.js","serviceWorker.js","index.js"],"names":["history","createHistory","basename","withStyles","root","background","input","color","classes","value","onChange","label","type","TextField","className","InputProps","Btn","title","onClick","disabled","Button","variant","setAuthData","payload","user","token","connect","signIn","data","useState","nick","setNick","password","setPassword","e","target","to","signUp","name","setName","email","setEmail","isAllFieldsFilled","store","chats","chat","loadAllChats","search","changeSearch","useEffect","placeholder","map","item","id","auth","createChat","creator","push","userId","message","setMessage","members","setMembers","messages","setMessages","chatId","location","path","split","length","getChatId","pathname","socket","socketIOClient","process","query","emit","on","off","mem","i","key","msg","TextareaAutosize","aria-label","msgOptions","recipientId","userOptions","ChatContainer","exact","component","ChatList","CreateChat","Chat","ChatApp","SignIn","SignUp","initialState","combineReducers","state","action","http","method","url","params","localStorage","getItem","config","toLowerCase","paramsSerializer","p","qs","stringify","arrayFormat","axios","authSaga","call","setItem","put","console","log","takeEvery","loadChats","chatSaga","chatList","sagas","rootSaga","all","composeEnhancers","composeWithDevTools","maxAge","latency","sagaMiddleware","createSagaMiddleware","persistConfig","storage","blacklist","persistedReducer","persistReducer","reducers","Boolean","window","hostname","match","createStore","applyMiddleware","run","persistor","persistStore","Storage","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5252dc8e.chunk.js","sourcesContent":["import { createBrowserHistory as createHistory } from 'history';\r\n\r\nconst history = createHistory({\r\n  basename: '/',\r\n});\r\n\r\nexport default history;","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst styles = {\r\n  root: {\r\n    background: \"#27292D\",\r\n  },\r\n  input: {\r\n    color: \"#ECECEC\",\r\n  },\r\n};\r\n\r\nconst Input = ({\r\n  classes,\r\n  value,\r\n  onChange,\r\n  label,\r\n  type,\r\n}) => {\r\n  return (\r\n    <TextField\r\n      label={label}\r\n      value={value}\r\n      onChange={onChange}\r\n      className={classes.root}\r\n      InputProps={{\r\n        className: classes.input,\r\n      }}\r\n      className='s_input'\r\n      type={type}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Input);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Btn = ({\r\n  title,\r\n  onClick,\r\n  disabled,\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant=\"outlined\"\r\n      onClick={onClick}\r\n      className='s_button'\r\n      disabled={disabled}\r\n    >\r\n      {title}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Btn;\r\n","export const SET_AUTH_DATA = '@auth/SET_AUTH_DATA';\r\nexport const SIGN_IN = '@auth/SIGN_IN';\r\nexport const SIGN_UP = '@auth/SIGN_UP';\r\n\r\nexport const setAuthData = ({ user, token }) => ({\r\n  type: SET_AUTH_DATA,\r\n  payload: {\r\n    user,\r\n    token\r\n  }\r\n});\r\n\r\nexport const signIn = (data) => ({\r\n  type: SIGN_IN,\r\n  payload: data\r\n});\r\n\r\nexport const signUp = (data) => ({\r\n  type: SIGN_UP,\r\n  payload: data,\r\n});\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from '../reusable/input';\r\nimport Button from '../reusable/button';\r\nimport { signIn } from '../../common/actions/auth';\r\nimport './signin.css';\r\n\r\nconst SignIn = ({ signIn }) => {\r\n  const [nick, setNick] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  return(\r\n    <div className='signin__container'>\r\n      <Input\r\n        label='Nickname'\r\n        value={nick}\r\n        onChange={(e) => setNick(e.target.value)}\r\n        className='s_input'\r\n      />\r\n      <Input\r\n        label='Password'\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        className='s_input'\r\n        type='password'\r\n      />\r\n      <Button\r\n        title='Confirm'\r\n        disabled={!nick || !password}\r\n        onClick={() => {\r\n          signIn({\r\n            nick,\r\n            password,\r\n          })\r\n        }}\r\n      />\r\n      <Link to='/signup'>\r\n        Registration\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(() => ({}), {\r\n  signIn,\r\n})(SignIn);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from '../reusable/input';\r\nimport Button from '../reusable/button';\r\nimport { signUp } from '../../common/actions/auth';\r\nimport './signup.css';\r\n\r\nconst SignUp = ({ signUp }) => {\r\n  const [nick, setNick] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n  const isAllFieldsFilled = !!nick && !!password && !!email\r\n  return(\r\n    <div className='signup__container'>\r\n      <Input\r\n        label='Nickname *'\r\n        value={nick}\r\n        onChange={(e) => setNick(e.target.value)}\r\n        className='s_input'\r\n      />\r\n      <Input\r\n        label='Password *'\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        className='s_input'\r\n        type='password'\r\n      />\r\n      <Input\r\n        label='Name'\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        className='s_input'\r\n      />\r\n      <Input\r\n        label='Email *'\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        className='s_input'\r\n      />\r\n      <Button\r\n        title='Register'\r\n        disabled={!nick || !password}\r\n        onClick={() => {\r\n          isAllFieldsFilled && signUp({\r\n            nick,\r\n            password,\r\n            name,\r\n            email,\r\n          });\r\n        }}\r\n      />\r\n      <Link to='/signin'>\r\n        Back\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(() => ({}), {\r\n  signUp,\r\n})(SignUp);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../reusable/button\";\r\nimport { loadAllChats } from \"../../../common/actions/chat\";\r\n// import socketIOClient from \"socket.io-client\";\r\nimport \"./index.css\";\r\n\r\n// const socketApi = process.env.REACT_APP_SOCKET_API;\r\n\r\nconst ChatList = ({ chats, loadAllChats }) => {\r\n  const [search, changeSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    loadAllChats(search);\r\n  }, [search]);\r\n\r\n  // useEffect(() => {\r\n  //   const socket = socketIOClient(socketApi, {\r\n  //     query: 'token=' + token\r\n  //   });\r\n\r\n  //   socket.on('timer', (data) => {\r\n  //     console.log(data, 'data')\r\n  //   });\r\n\r\n  //   socket.emit('entry_to_chat', {id});\r\n\r\n  //   // const test = (cb) => {\r\n\r\n  //   //   socket.on('timer', timestamp => cb(null, timestamp));\r\n  //   //   socket.emit('entry_to_chat', {id});\r\n  //   // }\r\n\r\n  //   // test((err, time) => {\r\n  //   //   console.log(time)\r\n  //   // })\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"chat__container\">\r\n      <div className=\"chat_plus\">\r\n        <Link to=\"/create\">\r\n          <Button title=\"+\" />\r\n        </Link>\r\n      </div>\r\n      <input\r\n        value={search}\r\n        placeholder=\"Search...\"\r\n        onChange={(e) => changeSearch(e.target.value)}\r\n      />\r\n      <div className=\"chat_list\">\r\n        {chats.map((item) => {\r\n          return <Link to={`/chat/${item.id}`}>{item.name}</Link>;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    chats: store.chat.chats,\r\n  }),\r\n  {\r\n    loadAllChats,\r\n  }\r\n)(ChatList);\r\n","export const LOAD_ALL_CHATS = '@chat/GET_ALL_CHATS';\r\nexport const SET_ALL_CHATS = '@chat/SET_ALL_CHATS';\r\nexport const CREATE_CHAT = '@chat/CREATE_CHAT';\r\n\r\nexport const loadAllChats = (search) => ({\r\n  type: LOAD_ALL_CHATS,\r\n  payload: search,\r\n});\r\n\r\nexport const setAllChats = (list) => ({\r\n  type: SET_ALL_CHATS,\r\n  payload: list,\r\n});\r\n\r\nexport const createChat = (name, creator) => ({\r\n  type: CREATE_CHAT,\r\n  payload: {\r\n    name,\r\n    creator,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Input from \"../../reusable/input\";\r\nimport Button from \"../../reusable/button\";\r\nimport { createChat } from '../../../common/actions/chat';\r\nimport history from '../../../services/history';\r\n\r\nimport \"./index.css\";\r\n\r\nconst CreateChat = ({ id, createChat }) => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"create-chat__container\">\r\n      <div className=\"chat_plus\">\r\n        <Link to=\"/\">\r\n          <Button title=\"Back\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"create-chat__data\">\r\n        <Input\r\n          label=\"Chat Name\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          className=\"s_input\"\r\n        />\r\n        <Button\r\n          title=\"Create\"\r\n          disabled={!name}\r\n          onClick={() => {\r\n            createChat(name, id);\r\n            history.push('/');\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((store) => ({\r\n  id: store.auth.user.id,\r\n}), {\r\n  createChat,\r\n})(CreateChat);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport Button from \"../../reusable/button\";\r\nimport history from \"../../../services/history\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst socketApi = process.env.REACT_APP_SOCKET_API;\r\n\r\nconst getChatId = (location) => {\r\n  const path = location.split(\"/\");\r\n  const chatId = path[path.length - 1];\r\n  return chatId;\r\n};\r\n\r\nconst Chat = ({ userId, token }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [members, setMembers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const chatId = getChatId(history.location.pathname);\r\n  const socket = socketIOClient(socketApi, {\r\n    query: {\r\n      token: token,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"entry_to_chat\", { userId, chatId });\r\n    socket.on(`chat_members/${chatId}`, (members) => {\r\n      setMembers(members);\r\n    });\r\n    socket.on(`messages/${chatId}`, (messages) => {\r\n      setMessages(messages);\r\n    });\r\n\r\n    return () => {\r\n      socket.emit(\"leave_chat\", { userId, chatId });\r\n      socket.off(`chat_members/${chatId}`);\r\n      socket.off(`messages/${chatId}`);\r\n    };\r\n  }, []);\r\n\r\n  const postPublicMessage = () => {\r\n    socket.emit(\"send_message\", {\r\n      msgOptions: {\r\n        type: \"public\",\r\n        message,\r\n        chatId,\r\n        userId,\r\n        recipientId: null,\r\n      },\r\n      userOptions: { chatId, userId },\r\n    });\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat_body\">\r\n      <div className=\"chat_body_leave\">\r\n        <Link to=\"/\">\r\n          <Button title=\"Leave Chat\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"chat_body_wrap\">\r\n        <div className=\"chat_body_members\">\r\n          {members.map((mem, i) => (\r\n            <span key={i}>{mem.user && mem.user.nick}</span>\r\n          ))}\r\n        </div>\r\n        <div className=\"chat_body_messages\">\r\n          <div className=\"messages_list\">\r\n            {messages.map((msg) => (\r\n              <div key={msg.id}>\r\n                <span className=\"msg_name\">{msg.user && msg.user.nick}</span>\r\n                <span className=\"msg_msg\">{msg.message}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"messages_inputs\">\r\n            <TextareaAutosize\r\n              aria-label=\"empty textarea\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              value={message}\r\n              className=\"message_input\"\r\n            />\r\n            <Button\r\n              title=\"Send\"\r\n              disabled={!message}\r\n              onClick={postPublicMessage}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (store) => ({\r\n    userId: store.auth.user.id,\r\n    token: store.auth.token,\r\n  }),\r\n  {}\r\n)(Chat);\r\n","import React from \"react\";\r\nimport { Route, Redirect, Switch, Router } from \"react-router-dom\";\r\nimport history from \"../../services/history\";\r\n\r\nimport ChatList from \"./chat-list\";\r\nimport CreateChat from './chat-create';\r\nimport Chat from './chat';\r\n\r\nconst ChatContainer = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChatList} />\r\n        <Route path=\"/create\" component={CreateChat} />\r\n        <Route path=\"/chat/:id\" component={Chat} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Redirect, Switch, Router } from \"react-router-dom\";\nimport history from \"./services/history\";\nimport \"./index.css\";\n\nimport SignIn from \"./components/signin/signin\";\nimport SignUp from \"./components/signup/signup\";\nimport ChatApp from \"./components/chat\";\n\nconst App = ({ token }) => (\n  <Router history={history}>\n    <div className=\"app\">\n      {token ? (\n        <Switch>\n          <Route path=\"/\" component={ChatApp} />\n          <Redirect to=\"/\" />\n        </Switch>\n      ) : (\n        <Switch>\n          <Route exact path=\"/signin\" component={SignIn} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Redirect to=\"/signin\" />\n        </Switch>\n      )}\n    </div>\n  </Router>\n);\n\nexport default connect(\n  (store) => ({\n    token: store.auth.token,\n  }),\n  {}\n)(App);\n","import { SET_AUTH_DATA } from '../actions/auth';\r\n\r\nconst initialState = {\r\n  user: {},\r\n  token: null,\r\n};\r\n\r\nexport default function auth(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_AUTH_DATA:\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_ALL_CHATS } from '../actions/chat';\r\n\r\nconst initialState = {\r\n  chats: [],\r\n};\r\n\r\nexport default function chat(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_ALL_CHATS:\r\n      return {\r\n        ...state,\r\n        chats: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport auth from './auth';\r\nimport chat from './chat';\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  chat,\r\n});\r\n","import axios from 'axios';\r\nimport qs from 'qs';\r\n\r\nconst apiRoot = process.env.REACT_APP_API;\r\n\r\nexport default function http({\r\n  method, url, data, params,\r\n}) {\r\n  const token = localStorage.getItem('auth');\r\n  const config = {\r\n    method: method.toLowerCase(),\r\n    url: apiRoot + url,\r\n    params,\r\n    paramsSerializer: function (p) {\r\n      return qs.stringify(p, { arrayFormat: 'repeat' });\r\n    },\r\n  };\r\n  if (data) config['data'] = data;\r\n  config['headers'] = {\r\n    'Content-Type': 'application/json',\r\n    'Access-Control-Allow-Origin': '*',\r\n  };\r\n  if (token) {\r\n    config['headers'] = {\r\n      'Authorization': 'Bearer ' + token,\r\n    };\r\n  }\r\n  return axios(config);\r\n}\r\n","import http from '../../services/http';\r\nimport { put, takeEvery, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n  setAuthData,\r\n  SIGN_IN,\r\n  SIGN_UP,\r\n\r\n} from '../actions/auth';\r\n\r\nfunction* signIn(action) {\r\n  try {\r\n    const user = yield call(http, {\r\n      url: '/signin',\r\n      method: 'POST',\r\n      data: action.payload,\r\n    });\r\n    localStorage.setItem('auth', user.data.token);\r\n    yield put(setAuthData({\r\n      token: user.data.token,\r\n      user: user.data.user,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const user = yield call(http, {\r\n      url: '/signup',\r\n      method: 'POST',\r\n      data: action.payload,\r\n    });\r\n    localStorage.setItem('auth', user.data.token);\r\n\r\n    yield put(setAuthData({\r\n      token: user.data.token,\r\n      user: user.data.user,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport default function* authSaga() {\r\n  yield takeEvery(SIGN_IN, signIn);\r\n  yield takeEvery(SIGN_UP, signUp);\r\n};\r\n","import http from \"../../services/http\";\r\nimport { put, takeEvery, call } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  LOAD_ALL_CHATS,\r\n  setAllChats,\r\n  CREATE_CHAT,\r\n} from \"../actions/chat\";\r\n\r\nfunction* loadChats(action) {\r\n  try {\r\n    const chatList = yield call(http, {\r\n      url: `/chats?search=${action.payload}`,\r\n      method: \"GET\",\r\n    });\r\n    yield put(setAllChats(chatList.data));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction* createChat(action) {\r\n  try {\r\n    yield call(http, {\r\n      url: \"/chats\",\r\n      method: \"POST\",\r\n      data: {\r\n        name: action.payload.name,\r\n        creator: action.payload.creator,\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport default function* chatSaga() {\r\n  yield takeEvery(LOAD_ALL_CHATS, loadChats);\r\n  yield takeEvery(CREATE_CHAT, createChat);\r\n};\r\n","import { all } from 'redux-saga/effects';\r\nimport authSaga from './auth';\r\nimport chatSaga from './chat';\r\n\r\nconst sagas = function* rootSaga() {\r\n  yield all([\r\n    authSaga(),\r\n    chatSaga(),\r\n  ]);\r\n};\r\n\r\nexport default sagas;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\nimport reducers from './common/reducers';\r\nimport sagas from './common/sagas';\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  maxAge: 25,\r\n  latency: 1500,\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst persistConfig = {\r\n  key: 'Chat',\r\n  storage,\r\n  blacklist: [],\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nexport default () => {\r\n  const store = createStore(\r\n    persistedReducer,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware),\r\n    ),\r\n  );\r\n  sagaMiddleware.run(sagas);\r\n  const persistor = persistStore(store);\r\n  return { persistor, store };\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport Storage from './store';\nimport * as serviceWorker from './serviceWorker';\n\nconst { persistor, store } = Storage();\n\nconst renderReactDom = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate\n        persistor={persistor}\n      >\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}